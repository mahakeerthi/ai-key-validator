name: CI Pipeline

on:
  pull_request:
    branches: [ main ]
  push:
    branches: [ main ]

permissions:
  contents: read
  security-events: write
  pull-requests: write
  checks: write

jobs:
  # Lint and Format Check
  lint:
    name: Lint & Format
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run ESLint
        run: npm run lint

      - name: Check Prettier formatting
        run: npm run format:check

  # Security Scanning
  security:
    name: Security Scan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run npm audit
        run: npm audit --audit-level moderate

      - name: Run Snyk security scan
        uses: snyk/actions/node@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --severity-threshold=high

  # Build Test
  build:
    name: Build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build project
        run: npm run build

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-files
          path: dist/
          retention-days: 7

  # Multi-platform and Multi-version Testing
  test:
    name: Test
    needs: [lint, security, build]
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        node-version: ['18.x', '20.x']

    runs-on: ${{ matrix.os }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run tests with coverage
        run: npm run test:coverage
        env:
          CI: true

      - name: Upload coverage to Codecov
        if: matrix.os == 'ubuntu-latest' && matrix.node-version == '20.x'
        uses: codecov/codecov-action@v4
        with:
          file: ./coverage/lcov.info
          flags: unittests
          name: codecov-umbrella
          fail_ci_if_error: true
          token: ${{ secrets.CODECOV_TOKEN }}

      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-results-${{ matrix.os }}-${{ matrix.node-version }}
          path: |
            coverage/
            coverage/junit.xml
          retention-days: 7

  # Coverage Enforcement
  coverage-check:
    name: Coverage Check
    needs: test
    runs-on: ubuntu-latest
    if: always()
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run coverage check
        run: |
          npm run test:coverage
          # Verify coverage meets 80% threshold
          node -e "
            const coverage = require('./coverage/coverage-summary.json');
            const total = coverage.total;
            const requiredCoverage = 80;
            
            console.log('Coverage Summary:');
            console.log('Lines:', total.lines.pct + '%');
            console.log('Statements:', total.statements.pct + '%');
            console.log('Functions:', total.functions.pct + '%');
            console.log('Branches:', total.branches.pct + '%');
            
            if (
              total.lines.pct < requiredCoverage ||
              total.statements.pct < requiredCoverage ||
              total.functions.pct < requiredCoverage ||
              total.branches.pct < requiredCoverage
            ) {
              console.error('❌ Coverage below 80% threshold');
              process.exit(1);
            } else {
              console.log('✅ Coverage meets 80% threshold');
            }
          "

  # Final status check
  ci-success:
    name: CI Success
    if: always()
    runs-on: ubuntu-latest
    needs: [lint, security, build, test, coverage-check]
    
    steps:
      - name: Check all jobs success
        if: |
          needs.lint.result != 'success' ||
          needs.security.result != 'success' ||
          needs.build.result != 'success' ||
          needs.test.result != 'success' ||
          needs.coverage-check.result != 'success'
        run: |
          echo "❌ One or more CI jobs failed"
          exit 1
          
      - name: CI Pipeline Success
        run: echo "✅ All CI checks passed"